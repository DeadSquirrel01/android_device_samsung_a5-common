From ed503568a11c2df91f6a6b0bf3e3c1d43f1a763c Mon Sep 17 00:00:00 2001
From: DeadSquirrel01 <m.marcaccini01@gmail.com>
Date: Sun, 14 Oct 2018 01:50:06 +0200
Subject: [PATCH] RIL-Make-RIL-subclassable.patch

Change-Id: I38e878f450ed923189dac6dfec0b2e65cd093f18
---
 Android.mk                                    |  4 +++
 .../internal/telephony/PhoneFactory.java      | 31 +++++++++++++++++--
 .../com/android/internal/telephony/RIL.java   | 27 ++++++++--------
 .../internal/telephony/RILRequest.java        |  2 +-
 4 files changed, 48 insertions(+), 16 deletions(-)

diff --git a/Android.mk b/Android.mk
index 561aed01a..4fcedeeed 100644
--- a/Android.mk
+++ b/Android.mk
@@ -24,6 +24,10 @@ LOCAL_SRC_FILES := $(call all-java-files-under, src/java) \
 	$(call all-Iaidl-files-under, src/java) \
 	$(call all-logtags-files-under, src/java)
 
+ifneq ($(BOARD_RIL_CLASS),)
+LOCAL_SRC_FILES += $(call find-other-java-files,$(BOARD_RIL_CLASS))
+endif
+
 LOCAL_JAVA_LIBRARIES := voip-common ims-common services bouncycastle
 LOCAL_STATIC_JAVA_LIBRARIES := \
     telephony-protos \
diff --git a/src/java/com/android/internal/telephony/PhoneFactory.java b/src/java/com/android/internal/telephony/PhoneFactory.java
index ba777470f..f2a961e6a 100644
--- a/src/java/com/android/internal/telephony/PhoneFactory.java
+++ b/src/java/com/android/internal/telephony/PhoneFactory.java
@@ -24,6 +24,7 @@ import android.content.pm.PackageManager;
 import android.net.LocalServerSocket;
 import android.os.Looper;
 import android.os.ServiceManager;
+import android.os.SystemProperties;
 import android.preference.PreferenceManager;
 import android.provider.Settings;
 import android.provider.Settings.SettingNotFoundException;
@@ -49,6 +50,7 @@ import com.android.internal.util.IndentingPrintWriter;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.lang.reflect.Constructor;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -161,6 +163,8 @@ public class PhoneFactory {
                 sPhones = new Phone[numPhones];
                 sCommandsInterfaces = new RIL[numPhones];
                 sTelephonyNetworkFactories = new TelephonyNetworkFactory[numPhones];
+                String sRILClassname = SystemProperties.get("ro.telephony.ril_class", "RIL").trim();
+                Rlog.i(LOG_TAG, "RILClassname is " + sRILClassname);
 
                 for (int i = 0; i < numPhones; i++) {
                     // reads the system properties and makes commandsinterface
@@ -168,8 +172,21 @@ public class PhoneFactory {
                     networkModes[i] = RILConstants.PREFERRED_NETWORK_MODE;
 
                     Rlog.i(LOG_TAG, "Network Mode set to " + Integer.toString(networkModes[i]));
-                    sCommandsInterfaces[i] = new RIL(context, networkModes[i],
-                            cdmaSubscription, i);
+
+                    // Use reflection to construct the RIL class (defaults to RIL)
+                    try {
+                        sCommandsInterfaces[i] = instantiateCustomRIL(
+                                sRILClassname, context, networkModes[i], cdmaSubscription, i);
+                    } catch (Exception e) {
+                        // 6 different types of exceptions are thrown here that it's easier to just
+                        // catch Exception as our "error handling" is the same. Yes, we're blocking
+                        // the whole thing and making the radio unusable. That's by design.
+                        // The log message should make it clear why the radio is broken
+                        while (true) {
+                            Rlog.e(LOG_TAG, "Unable to construct custom RIL class", e);
+                            try { Thread.sleep(10000); } catch (InterruptedException ie) {}
+                        }
+                    }
                 }
                 Rlog.i(LOG_TAG, "Creating SubscriptionController");
                 SubscriptionController.init(context, sCommandsInterfaces);
@@ -264,6 +281,16 @@ public class PhoneFactory {
         }
     }
 
+    private static <T> T instantiateCustomRIL(String sRILClassname, Context context,
+                                        int networkMode, int cdmaSubscription, Integer instanceId)
+                                        throws Exception {
+        Class<?> clazz = Class.forName("com.android.internal.telephony." + sRILClassname);
+        Constructor<?> constructor = clazz.getConstructor(
+                                            Context.class, int.class, int.class, Integer.class);
+        return (T) clazz.cast(constructor.newInstance(
+                                            context, networkMode, cdmaSubscription, instanceId));
+    }
+
     public static Phone getDefaultPhone() {
         synchronized (sLockProxyPhones) {
             if (!sMadeDefaults) {
diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index f8329630f..6574b2b5c 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -183,7 +183,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
     private WorkSource mActiveWakelockWorkSource;
 
     /** Telephony metrics instance for logging metrics event */
-    private TelephonyMetrics mMetrics = TelephonyMetrics.getInstance();
+    protected TelephonyMetrics mMetrics = TelephonyMetrics.getInstance();
 
     boolean mIsMobileNetworkSupported;
     RadioResponse mRadioResponse;
@@ -351,7 +351,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
 
     /** Returns a {@link IRadio} instance or null if the service is not available. */
     @VisibleForTesting
-    public IRadio getRadioProxy(Message result) {
+    protected IRadio getRadioProxy(Message result) {
         if (!mIsMobileNetworkSupported) {
             if (RILJ_LOGV) riljLog("getRadioProxy: Not calling getService(): wifi-only");
             if (result != null) {
@@ -505,7 +505,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private void addRequest(RILRequest rr) {
+    protected void addRequest(RILRequest rr) {
         acquireWakeLock(rr, FOR_WAKELOCK);
         synchronized (mRequestList) {
             rr.mStartTimeMs = SystemClock.elapsedRealtime();
@@ -513,18 +513,19 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private RILRequest obtainRequest(int request, Message result, WorkSource workSource) {
+    protected RILRequest obtainRequest(int request, Message result, WorkSource workSource) {
         RILRequest rr = RILRequest.obtain(request, result, workSource);
         addRequest(rr);
         return rr;
     }
 
-    private void handleRadioProxyExceptionForRR(RILRequest rr, String caller, Exception e) {
+    protected void handleRadioProxyExceptionForRR(RILRequest rr, String caller, Exception e) {
+
         riljLoge(caller + ": " + e);
         resetProxyAndRequestList();
     }
 
-    private String convertNullToEmptyString(String string) {
+    protected String convertNullToEmptyString(String string) {
         return string != null ? string : "";
     }
 
@@ -2507,7 +2508,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private void constructCdmaSendSmsRilRequest(CdmaSmsMessage msg, byte[] pdu) {
+    protected void constructCdmaSendSmsRilRequest(CdmaSmsMessage msg, byte[] pdu) {
         int addrNbrOfDigits;
         int subaddrNbrOfDigits;
         int bearerDataLength;
@@ -4233,7 +4234,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
     /**
      * Function to send ack and acquire related wakelock
      */
-    private void sendAck() {
+    protected void sendAck() {
         // TODO: Remove rr and clean up acquireWakelock for response and ack
         RILRequest rr = RILRequest.obtain(RIL_RESPONSE_ACKNOWLEDGEMENT, null,
                 mRILDefaultWorkSource);
@@ -4269,7 +4270,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      * There is a WAKE_LOCK_TIMEOUT to release the lock, though it shouldn't
      * happen often.
      */
-    private void acquireWakeLock(RILRequest rr, int wakeLockType) {
+    protected void acquireWakeLock(RILRequest rr, int wakeLockType) {
         synchronized (rr) {
             if (rr.mWakeLockType != INVALID_WAKELOCK) {
                 Rlog.d(RILJ_LOG_TAG, "Failed to aquire wakelock for " + rr.serialString());
@@ -4337,7 +4338,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         return mRequestList;
     }
 
-    private void decrementWakeLock(RILRequest rr) {
+    protected void decrementWakeLock(RILRequest rr) {
         synchronized (rr) {
             switch(rr.mWakeLockType) {
                 case FOR_WAKELOCK:
@@ -4401,7 +4402,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      * @param error is the RIL_Errno sent back
      * @param loggable true means to print all requests in mRequestList
      */
-    private void clearRequestList(int error, boolean loggable) {
+    protected void clearRequestList(int error, boolean loggable) {
         RILRequest rr;
         synchronized (mRequestList) {
             int count = mRequestList.size();
@@ -4424,7 +4425,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private RILRequest findAndRemoveRequestFromList(int serial) {
+    protected RILRequest findAndRemoveRequestFromList(int serial) {
         RILRequest rr = null;
         synchronized (mRequestList) {
             rr = mRequestList.get(serial);
@@ -4436,7 +4437,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         return rr;
     }
 
-    private void addToRilHistogram(RILRequest rr) {
+    protected void addToRilHistogram(RILRequest rr) {
         long endTime = SystemClock.elapsedRealtime();
         int totalTime = (int) (endTime - rr.mStartTimeMs);
 
diff --git a/src/java/com/android/internal/telephony/RILRequest.java b/src/java/com/android/internal/telephony/RILRequest.java
index ffe4a8226..2ee9f29b5 100644
--- a/src/java/com/android/internal/telephony/RILRequest.java
+++ b/src/java/com/android/internal/telephony/RILRequest.java
@@ -72,7 +72,7 @@ public class RILRequest {
      * @param result sent when operation completes
      * @return a RILRequest instance from the pool.
      */
-    private static RILRequest obtain(int request, Message result) {
+    protected static RILRequest obtain(int request, Message result) {
         RILRequest rr = null;
 
         synchronized (sPoolSync) {
-- 
2.18.0

