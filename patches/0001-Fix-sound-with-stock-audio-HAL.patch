From 23a6c17b831d92ecbc8f888114d7db3653326012 Mon Sep 17 00:00:00 2001
From: DeadSquirrel01 <m.marcaccini01@gmail.com>
Date: Fri, 2 Nov 2018 17:32:59 +0100
Subject: [PATCH] Fix sound with stock audio HAL

Change-Id: Ia84c62d35f498df3c74608ff54ba361438ae923b
---
 fmapp2/src/com/caf/fmradio/FMRadio.java       | 17 +++++
 .../src/com/caf/fmradio/FMRadioService.java   | 75 +++++++++++++++++++
 2 files changed, 92 insertions(+)

diff --git a/fmapp2/src/com/caf/fmradio/FMRadio.java b/fmapp2/src/com/caf/fmradio/FMRadio.java
index 877aa9d2..c81ecd26 100644
--- a/fmapp2/src/com/caf/fmradio/FMRadio.java
+++ b/fmapp2/src/com/caf/fmradio/FMRadio.java
@@ -2692,6 +2692,23 @@ public class FMRadio extends Activity
       }//handleMessage
    };
 
+@Override
+public boolean onKeyDown(int keyCode, KeyEvent event) {
+ AudioManager audio = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+    switch (keyCode) {
+    case KeyEvent.KEYCODE_VOLUME_UP:
+        audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+                AudioManager.ADJUST_RAISE, AudioManager.FLAG_SHOW_UI);
+        return true;
+    case KeyEvent.KEYCODE_VOLUME_DOWN:
+        audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+                AudioManager.ADJUST_LOWER, AudioManager.FLAG_SHOW_UI);
+        return true;
+    default:
+        return super.onKeyDown(keyCode, event);
+    }
+}
+
    private void resetFMStationInfoUI() {
       mTunedStation.setFrequency(FmSharedPreferences.getTunedFrequency());
       mTunedStation.setName("");
diff --git a/fmapp2/src/com/caf/fmradio/FMRadioService.java b/fmapp2/src/com/caf/fmradio/FMRadioService.java
index b109b40b..20e8048a 100644
--- a/fmapp2/src/com/caf/fmradio/FMRadioService.java
+++ b/fmapp2/src/com/caf/fmradio/FMRadioService.java
@@ -104,7 +104,31 @@ import android.bluetooth.BluetoothDevice;
 import android.os.IBinder.DeathRecipient;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
+import android.database.ContentObserver;
 
+class SettingsContentObserver extends ContentObserver {
+    Context context;
+
+    public SettingsContentObserver(Context c, Handler handler) {
+        super(handler);
+        context=c;
+    }
+
+    @Override
+    public boolean deliverSelfNotifications() {
+        return super.deliverSelfNotifications();
+    }
+
+    @Override
+    public void onChange(boolean selfChange) {
+        super.onChange(selfChange);
+        AudioManager mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+        int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+        float vol = (float) currvol / 100;
+        mAudioManager.setParameters("FMRadioVol=" + vol);
+        Log.d("FMService", "vol: " + String.format("%.10f", vol));
+    }
+}
 
 /**
  * Provides "background" FM Radio (that uses the hardware) capabilities,
@@ -247,6 +271,7 @@ public class FMRadioService extends Service
    private static Object mNotificationLock = new Object();
 
    private boolean mEventReceived = false;
+   private SettingsContentObserver mSettingsContentObserver;
    private boolean isfmOffFromApplication = false;
 
    private AudioRoutingListener mRoutingListener =  null;
@@ -300,6 +325,8 @@ public class FMRadioService extends Service
       String valueStr = audioManager.getParameters("isA2dpDeviceSupported");
       mA2dpDeviceSupportInHal = valueStr.contains("=true");
       Log.d(LOGTAG, " is A2DP device Supported In HAL"+mA2dpDeviceSupportInHal);
+      mSettingsContentObserver = new SettingsContentObserver(this,new Handler());
+      getApplicationContext().getContentResolver().registerContentObserver(android.provider.Settings.System.CONTENT_URI, true, mSettingsContentObserver );
 
       getA2dpStatusAtStart();
 
@@ -376,6 +403,7 @@ public class FMRadioService extends Service
 
       TelephonyManager tmgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
       tmgr.listen(mPhoneStateListener, 0);
+      getApplicationContext().getContentResolver().unregisterContentObserver(mSettingsContentObserver);
 
       Log.d(LOGTAG, "onDestroy: unbindFromService completed");
 
@@ -769,9 +797,19 @@ public class FMRadioService extends Service
                               if (mSpeakerPhoneOn) {
                                   Log.d(LOGTAG, "route audio to speaker");
                                   startApplicationLoopBack(AudioDeviceInfo.TYPE_BUILTIN_SPEAKER);
+                                  mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+                                  mAudioManager.setSpeakerphoneOn(true);
+                                  mAudioManager.setParameters("fm_mode=on");
+                                  mAudioManager.setParameters("fm_radio_volume=on");
                               } else {
                                   Log.d(LOGTAG, "route audio to wiredHeadset");
                                   startApplicationLoopBack(AudioDeviceInfo.TYPE_WIRED_HEADSET);
+                                  mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+                                  mAudioManager.setSpeakerphoneOn(false);
+                                  mAudioManager.setParameters("fm_mode=on");
+                                  mAudioManager.setParameters("fm_radio_volume=on");
+                                  mAudioManager.setParameters("fm_mute=0");
+                                  mAudioManager.setParameters("fm_radio_mute=0");
                               }
                        }
                     } else if (action.equals("HDMI_CONNECTED")) {
@@ -1192,6 +1230,10 @@ public class FMRadioService extends Service
        mStoppedOnFocusLoss = false;
        mPlaybackInProgress = true;
 
+       int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+       float vol = (float) currvol / 100;
+       mAudioManager.setParameters("fm_radio_volume=on");
+
        if (mStoppedOnFactoryReset) {
            mStoppedOnFactoryReset = false;
            mSpeakerPhoneOn = false;
@@ -1202,8 +1244,20 @@ public class FMRadioService extends Service
                Log.d(LOGTAG, "Route audio to " + temp);
                if(!mSpeakerPhoneOn) {
                    startApplicationLoopBack(AudioDeviceInfo.TYPE_WIRED_HEADSET);
+                   mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+                   mAudioManager.setSpeakerphoneOn(false);
+                   mAudioManager.setParameters("fm_mode=on");
+                   mAudioManager.setParameters("fm_radio_volume=on");
+                   mAudioManager.setParameters("fm_mute=0");
+                   mAudioManager.setParameters("fm_radio_mute=0");
+                   mAudioManager.setParameters("FMRadioVol=" + vol);
                } else {
                    startApplicationLoopBack(AudioDeviceInfo.TYPE_BUILTIN_SPEAKER);
+                   mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+                   mAudioManager.setSpeakerphoneOn(true);
+                   mAudioManager.setParameters("fm_mode=on");
+                   mAudioManager.setParameters("fm_radio_volume=on");
+                   mAudioManager.setParameters("FMRadioVol=" + vol);
                }
        } else {
                configureAudioDataPath(true);
@@ -1220,6 +1274,8 @@ public class FMRadioService extends Service
        Log.d(LOGTAG, "In stopFM");
        configureAudioDataPath(false);
        mPlaybackInProgress = false;
+       mAudioManager.setParameters("fm_radio_mute=1");
+       mAudioManager.setParameters("fm_mode=off");
        try {
            if ((mServiceInUse) && (mCallbacks != null))
                mCallbacks.onFmAudioPathStopped();
@@ -1672,6 +1728,9 @@ public class FMRadioService extends Service
       public void run() {
          Log.v(LOGTAG, "*** Disabling Speaker");
          exitRecordSinkThread();
+         mAudioManager.setSpeakerphoneOn(false);
+         mAudioManager.setParameters("fm_mode=on");
+         mAudioManager.setParameters("fm_radio_volume=on");
       }
    };
 
@@ -2640,6 +2699,9 @@ public class FMRadioService extends Service
       if ( mSpeakerPhoneOn) {
           mSpeakerPhoneOn = false;
           exitRecordSinkThread();
+          mAudioManager.setSpeakerphoneOn(false);
+          mAudioManager.setParameters("fm_mode=on");
+          mAudioManager.setParameters("fm_radio_volume=on");
       }
    }
 
@@ -2789,12 +2851,23 @@ public class FMRadioService extends Service
 
        mSpeakerPhoneOn = speakerOn;
 
+       int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+       float vol = (float) currvol / 100;
+
        if (speakerOn == false) {
             Log.d(LOGTAG, "route audio to wired headset");
            startApplicationLoopBack(AudioDeviceInfo.TYPE_WIRED_HEADSET);
+           mAudioManager.setSpeakerphoneOn(false);
+           mAudioManager.setParameters("fm_radio_volume=on");
+           mAudioManager.setParameters("fm_mute=0");
+           mAudioManager.setParameters("fm_radio_mute=0");
+           mAudioManager.setParameters("FMRadioVol=" + vol);
        } else if (speakerOn == true) {
            Log.d(LOGTAG, "enabling speaker");
                startApplicationLoopBack(AudioDeviceInfo.TYPE_BUILTIN_SPEAKER);
+               mAudioManager.setSpeakerphoneOn(true);
+               mAudioManager.setParameters("fm_radio_volume=on");
+               mAudioManager.setParameters("FMRadioVol=" + vol);
        }
        Log.d(LOGTAG, "speakerOn completed:" + speakerOn);
    }
@@ -2894,6 +2967,7 @@ public class FMRadioService extends Service
       {
          mMuted = true;
          audioManager.setParameters("fm_mute=1");
+         audioManager.setParameters("fm_radio_mute=1");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(0.0f);
       }
@@ -2916,6 +2990,7 @@ public class FMRadioService extends Service
       {
          mMuted = false;
          audioManager.setParameters("fm_mute=0");
+         audioManager.setParameters("fm_radio_mute=0");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(1.0f);
          if (mResumeAfterCall)
-- 
2.18.1

