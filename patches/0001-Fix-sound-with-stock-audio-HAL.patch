From 6b40d05e5e42683068b57a96f9f6cfbf4c4d3193 Mon Sep 17 00:00:00 2001
From: DeadSquirrel01 <m.marcaccini01@gmail.com>
Date: Sun, 27 Jan 2019 16:42:51 +0100
Subject: [PATCH] Fix sound with stock audio HAL

Change-Id: I5f73733f59a873d727b1771d0a5e19130099f182
---
 fmapp2/src/com/caf/fmradio/FMRadio.java       | 17 +++++
 .../src/com/caf/fmradio/FMRadioService.java   | 71 +++++++++++++++++++
 2 files changed, 88 insertions(+)

diff --git a/fmapp2/src/com/caf/fmradio/FMRadio.java b/fmapp2/src/com/caf/fmradio/FMRadio.java
index dcb4a12c..cfe6a363 100644
--- a/fmapp2/src/com/caf/fmradio/FMRadio.java
+++ b/fmapp2/src/com/caf/fmradio/FMRadio.java
@@ -2679,6 +2679,23 @@ public class FMRadio extends Activity
       }//handleMessage
    };
 
+@Override
+public boolean onKeyDown(int keyCode, KeyEvent event) {
+ AudioManager audio = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+    switch (keyCode) {
+    case KeyEvent.KEYCODE_VOLUME_UP:
+        audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+                AudioManager.ADJUST_RAISE, AudioManager.FLAG_SHOW_UI);
+        return true;
+    case KeyEvent.KEYCODE_VOLUME_DOWN:
+        audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
+                AudioManager.ADJUST_LOWER, AudioManager.FLAG_SHOW_UI);
+        return true;
+    default:
+        return super.onKeyDown(keyCode, event);
+    }
+}
+
    private void resetFMStationInfoUI() {
       mTunedStation.setFrequency(FmSharedPreferences.getTunedFrequency());
       mTunedStation.setName("");
diff --git a/fmapp2/src/com/caf/fmradio/FMRadioService.java b/fmapp2/src/com/caf/fmradio/FMRadioService.java
index 63c1e687..711a37bf 100644
--- a/fmapp2/src/com/caf/fmradio/FMRadioService.java
+++ b/fmapp2/src/com/caf/fmradio/FMRadioService.java
@@ -105,7 +105,31 @@ import android.os.IBinder.DeathRecipient;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
 import java.lang.Math;
+import android.database.ContentObserver;
 
+class SettingsContentObserver extends ContentObserver {
+    Context context;
+
+    public SettingsContentObserver(Context c, Handler handler) {
+        super(handler);
+        context=c;
+    }
+
+    @Override
+    public boolean deliverSelfNotifications() {
+        return super.deliverSelfNotifications();
+    }
+
+    @Override
+    public void onChange(boolean selfChange) {
+        super.onChange(selfChange);
+        AudioManager mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+        int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+        float vol = (float) currvol / 100;
+        mAudioManager.setParameters("FMRadioVol=" + vol);
+        Log.d("FMService", "vol: " + String.format("%.10f", vol));
+    }
+}
 
 /**
  * Provides "background" FM Radio (that uses the hardware) capabilities,
@@ -240,6 +264,7 @@ public class FMRadioService extends Service
    private static Object mNotificationLock = new Object();
 
    private boolean mEventReceived = false;
+   private SettingsContentObserver mSettingsContentObserver;
    private boolean isfmOffFromApplication = false;
 
    public FMRadioService() {
@@ -291,6 +316,8 @@ public class FMRadioService extends Service
       String valueStr = audioManager.getParameters("isA2dpDeviceSupported");
       mA2dpDeviceSupportInHal = valueStr.contains("=true");
       Log.d(LOGTAG, " is A2DP device Supported In HAL"+mA2dpDeviceSupportInHal);
+      mSettingsContentObserver = new SettingsContentObserver(this,new Handler());
+      getApplicationContext().getContentResolver().registerContentObserver(android.provider.Settings.System.CONTENT_URI, true, mSettingsContentObserver );
 
       getA2dpStatusAtStart();
 
@@ -366,6 +393,7 @@ public class FMRadioService extends Service
 
       TelephonyManager tmgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
       tmgr.listen(mPhoneStateListener, 0);
+      getApplicationContext().getContentResolver().unregisterContentObserver(mSettingsContentObserver);
 
       Log.d(LOGTAG, "onDestroy: unbindFromService completed");
 
@@ -714,6 +742,10 @@ public class FMRadioService extends Service
             if(!isAntennaAvailable())
             {
                 mSpeakerPhoneOn = false;
+                mAudioManager.setSpeakerphoneOn(false);
+                mAudioManager.setParameters("fm_mode=on");
+                mAudioManager.setParameters("fm_radio_volume=on");
+
                 if (!isFmOn())
                     return;
                 /* Disable FM and let the UI know */
@@ -990,17 +1022,37 @@ public class FMRadioService extends Service
        mStoppedOnFocusLoss = false;
        mPlaybackInProgress = true;
 
+       int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+       float vol = (float) currvol / 100;
+       mAudioManager.setParameters("fm_radio_volume=on");
+
        if (mStoppedOnFactoryReset) {
            mStoppedOnFactoryReset = false;
            mSpeakerPhoneOn = false;
+           mAudioManager.setSpeakerphoneOn(false);
+           mAudioManager.setParameters("fm_mode=on");
+           mAudioManager.setParameters("fm_radio_volume=on");
+
        // In FM stop, the audio route is set to default audio device
        }
        String temp = mSpeakerPhoneOn ? "Speaker" : "WiredHeadset";
        Log.d(LOGTAG, "Route audio to " + temp);
        if (mSpeakerPhoneOn) {
            mAudioDevice = AudioDeviceInfo.TYPE_BUILTIN_SPEAKER;
+           mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+           mAudioManager.setSpeakerphoneOn(true);
+           mAudioManager.setParameters("fm_mode=on");
+           mAudioManager.setParameters("fm_radio_volume=on");
+           mAudioManager.setParameters("FMRadioVol=" + vol);
        } else {
            mAudioDevice = AudioDeviceInfo.TYPE_WIRED_HEADPHONES;
+           mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+           mAudioManager.setSpeakerphoneOn(false);
+           mAudioManager.setParameters("fm_mode=on");
+           mAudioManager.setParameters("fm_radio_volume=on");
+           mAudioManager.setParameters("fm_mute=0");
+           mAudioManager.setParameters("fm_radio_mute=0");
+           mAudioManager.setParameters("FMRadioVol=" + vol);
        }
        configureFMDeviceLoopback(true);
        try {
@@ -1015,6 +1067,8 @@ public class FMRadioService extends Service
        Log.d(LOGTAG, "In stopFM");
        configureFMDeviceLoopback(false);
        mPlaybackInProgress = false;
+       mAudioManager.setParameters("fm_radio_mute=1");
+       mAudioManager.setParameters("fm_mode=off");
        try {
            if ((mServiceInUse) && (mCallbacks != null))
                mCallbacks.onFmAudioPathStopped();
@@ -2393,6 +2447,9 @@ public class FMRadioService extends Service
 
       if ( mSpeakerPhoneOn) {
           mSpeakerPhoneOn = false;
+          mAudioManager.setSpeakerphoneOn(false);
+          mAudioManager.setParameters("fm_mode=on");
+          mAudioManager.setParameters("fm_radio_volume=on");
       }
    }
 
@@ -2544,6 +2601,10 @@ public class FMRadioService extends Service
            return;
 
        mSpeakerPhoneOn = speakerOn;
+
+       int currvol = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
+       float vol = (float) currvol / 100;
+
        if (mReceiver.isCherokeeChip() && (mPref.getBoolean("SLIMBUS_SEQ", true))) {
            enableSlimbus(DISABLE_SLIMBUS_DATA_PORT);
        }
@@ -2551,9 +2612,17 @@ public class FMRadioService extends Service
        if (speakerOn == false) {
            mAudioDevice = AudioDeviceInfo.TYPE_WIRED_HEADPHONES;
            outputDevice = "WiredHeadset";
+           mAudioManager.setSpeakerphoneOn(false);
+           mAudioManager.setParameters("fm_radio_volume=on");
+           mAudioManager.setParameters("fm_mute=0");
+           mAudioManager.setParameters("fm_radio_mute=0");
+           mAudioManager.setParameters("FMRadioVol=" + vol);
        } else {
            mAudioDevice = AudioDeviceInfo.TYPE_BUILTIN_SPEAKER;
            outputDevice = "Speaker";
+           mAudioManager.setSpeakerphoneOn(true);
+           mAudioManager.setParameters("fm_radio_volume=on");
+           mAudioManager.setParameters("FMRadioVol=" + vol);
        }
        mAudioDeviceType = mAudioDevice | AudioSystem.DEVICE_OUT_FM;
        AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
@@ -2624,6 +2693,7 @@ public class FMRadioService extends Service
       {
          mMuted = true;
          audioManager.setParameters("fm_mute=1");
+         audioManager.setParameters("fm_radio_mute=1");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(0.0f);
       }
@@ -2646,6 +2716,7 @@ public class FMRadioService extends Service
       {
          mMuted = false;
          audioManager.setParameters("fm_mute=0");
+         audioManager.setParameters("fm_radio_mute=0");
          if (mAudioTrack != null)
              mAudioTrack.setVolume(1.0f);
          if (mResumeAfterCall)
-- 
2.19.2

